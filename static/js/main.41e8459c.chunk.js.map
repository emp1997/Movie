{"version":3,"sources":["Movie.js","App.js","reportWebVitals.js","index.js"],"names":["MoviePoster","poster","alt","src","title","className","MovieGenre","genre","Movie","genres","synopsis","map","index","text","maxLine","ellipsis","trimRight","basedOn","App","state","_renderMovies","movies","movie","console","log","title_english","medium_cover_image","id","_getMovies","a","_callApi","setState","fetch","then","potato","json","data","catch","err","this","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wSA+BE,SAASA,EAAT,GAAoC,IAAdC,EAAa,EAAbA,OAAQC,EAAK,EAALA,IAC5B,OACE,qBAAKC,IAAKF,EAAQC,IAAKA,EAAKE,MAAOF,EAAKG,UAAU,kBAItD,SAASC,EAAT,GAA6B,IAARC,EAAO,EAAPA,MACnB,OACE,uBAAMF,UAAU,gBAAhB,UAAiCE,EAAjC,OAoBWC,MArDf,YAAkD,IAAlCJ,EAAiC,EAAjCA,MAAOH,EAA0B,EAA1BA,OAAQQ,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,SACrC,OACE,sBAAKL,UAAU,QAAf,UACE,qBAAKA,UAAU,gBAAf,SACE,cAACL,EAAD,CAAaC,OAAQA,EAAQC,IAAKE,MAEpC,sBAAKC,UAAU,gBAAf,UACE,6BAAKD,IACL,qBAAKC,UAAU,gBAAf,SACGI,EAAOE,KAAI,SAACJ,EAAOK,GAAR,OAAkB,cAACN,EAAD,CAAYC,MAAOA,GAAYK,QAE/D,mBAAGP,UAAU,kBAAb,SACE,cAAC,IAAD,CACAQ,KAAMH,EACNI,QAAQ,IACRC,SAAS,OACTC,WAAS,EACTC,QAAQ,qBCgCLC,E,4MA7CbC,MAAQ,G,EAMRC,cAAgB,WAWd,OAVe,EAAKD,MAAME,OAAOV,KAAI,SAAAW,GAEnC,OADAC,QAAQC,IAAIF,GACL,cAAC,EAAD,CACLlB,MAAOkB,EAAMG,cACbxB,OAAQqB,EAAMI,mBAEdjB,OAAQa,EAAMb,OACdC,SAAUY,EAAMZ,UAFXY,EAAMK,Q,EAQjBC,W,sBAAa,4BAAAC,EAAA,sEACU,EAAKC,WADf,OACLT,EADK,OAEX,EAAKU,SAAS,CACZV,WAHS,2C,EAQbS,SAAW,WACT,OAAOE,MAAM,iEACZC,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKf,UACvBgB,OAAM,SAAAC,GAAG,OAAIf,QAAQC,IAAIc,O,uDA9B5B,WACEC,KAAKX,e,oBAgCP,WACE,IAAQP,EAAWkB,KAAKpB,MAAhBE,OACR,OACE,qBAAKhB,UAAWgB,EAAS,MAAQ,cAAjC,SACGA,EAASkB,KAAKnB,gBAAkB,gB,GA5CvBoB,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBV,MAAK,YAAkD,IAA/CW,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.41e8459c.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Movie.css';\r\nimport LinesEllipsis from 'react-lines-ellipsis';\r\n\r\n\r\n  function Movie({title, poster, genres, synopsis}){\r\n    return (\r\n      <div className=\"Movie\">\r\n        <div className=\"Movie__Colums\">\r\n          <MoviePoster poster={poster} alt={title}/>\r\n        </div>\r\n        <div className=\"Movie__Colums\">\r\n          <h1>{title}</h1>\r\n          <div className=\"Movie__Genres\">\r\n            {genres.map((genre, index) => <MovieGenre genre={genre} key={index} />)}\r\n          </div>\r\n          <p className=\"Moive__Synopsis\">\r\n            <LinesEllipsis \r\n            text={synopsis}\r\n            maxLine='3'\r\n            ellipsis=' ...'\r\n            trimRight\r\n            basedOn='letters'\r\n            />\r\n          </p>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  function MoviePoster({poster, alt}){\r\n    return(\r\n      <img src={poster} alt={alt} title={alt} className=\"Movie__Poster\"/>\r\n    )\r\n  }\r\n\r\n  function MovieGenre({genre}){\r\n    return(\r\n      <span className=\"Movie__Genres\">{genre} </span>\r\n    )\r\n  }\r\n\r\n  Movie.propTypes = {\r\n    title : PropTypes.string.isRequired,\r\n    poster : PropTypes.string.isRequired,\r\n    genres : PropTypes.array.isRequired,\r\n    synopsis : PropTypes.string.isRequired\r\n  }\r\n\r\n  MoviePoster.propTypes = {\r\n    poster: PropTypes.string.isRequired,\r\n    alt: PropTypes.string.isRequired\r\n  }\r\n\r\n  MovieGenre.propTypes = {\r\n    genre : PropTypes.string.isRequired\r\n  }\r\n  \r\n  export default Movie;","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie'\n\n\nclass App extends Component {\n\n  //Render : componentWillMount() -> render() -> componentDidMount()\n  //Update : componentWillMount() -> shouldComponentUpdate() -> componentWillMount() -> render() -> componentDidMount()\n\n  state = {}\n\n  componentDidMount(){\n    this._getMovies();\n  }\n\n  _renderMovies = () => {\n    const movies = this.state.movies.map(movie => {\n      console.log(movie)\n      return <Movie \n        title={movie.title_english} \n        poster={movie.medium_cover_image} \n        key={movie.id} \n        genres={movie.genres}\n        synopsis={movie.synopsis}\n      />\n    })\n    return movies\n  }\n\n  _getMovies = async () => {\n    const movies = await this._callApi()\n    this.setState({\n      movies\n    })\n  }\n //https://yts-proxy.now.sh/list_movies.json?sort_by=rating\n \n  _callApi = () => {\n    return fetch(\"https://yts.mx/api/v2/list_movies.json?sort_by=download_count\")\n    .then(potato => potato.json())\n    .then(json => json.data.movies)\n    .catch(err => console.log(err))\n  }\n\n  render() {\n    const { movies } = this.state;\n    return (\n      <div className={movies ? \"App\" : \"App-loading\"}>\n        {movies ? this._renderMovies() : 'Loading'}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}